@model EZY.RMAS.Contract.InvoiceHeader
@{
    ViewBag.Title = "CustomerInvoice";
}
@section seccss{

    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.css" rel="stylesheet">
    <link href="@Url.Content("~/Css/select2.min.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Css/sweetalert.css")" rel="stylesheet" />
}


@using (Html.BeginForm("CustomerInvoice", "Invoice", FormMethod.Post, new { id = "frm", name = "frm", enctype = "multipart/form-data" }))
{

    <section class="content">
        <div class="box box-default">
            <div class="box-header with-border">
                <h3 class="box-title"><i class="fa fa-list-alt" aria-hidden="true"></i>&nbsp;Material Outward</h3>
            </div>
            <div class="box-body">
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">Product Category&nbsp; <span class="error-req">*</span></label>
                    </div>
                    <div class="col-md-4">
                        @Html.DropDownListFor(x => x.ProductCategory,
          new SelectList(ViewBag.productCategory, "Value", "Text"),
          "Select Category",
          new { @class = "form-control input-sm", onchange = "productCategoryChanged(this)" })
                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">Product&nbsp; <span class="error-req">*</span></label>
                    </div>
                    <div class="col-md-4">
                        @if (string.IsNullOrWhiteSpace(Model.ProductCode))
                        {
                            @Html.DropDownListFor(x => x.ProductCode,
                            Enumerable.Empty<SelectListItem>(),
                            "Select Product",
                            new { @class = "form-control input-sm", @readonly = "readonly", onchange = "productChanged(this)" })
                        }
                        else
                        {
                            @Html.DropDownListFor(x => x.ProductCode,
                            new SelectList(ViewBag.vProducts, "Value", "Text"),
                            "Select Product",
                            new { @class = "form-control input-sm", onchange = "productChanged(this)" })
                        }

                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">Description&nbsp; <span class="error-req">*</span></label>
                    </div>
                    <div class="col-md-4">

                        @Html.TextBoxFor(x => x.ProductDescription, new { @class = "form-control input-sm", @readonly = "readonly" })
                        @Html.HiddenFor(x => x.ModelNo, new { @class = "form-control input-sm" })
                        @*@if (string.IsNullOrWhiteSpace(Model.ModelNo))
                                          {
                                              @Html.DropDownListFor(x => x.ModelNo,
                            Enumerable.Empty<SelectListItem>(),
                            "Select ModelNo",
                            new { @class = "form-control input-sm", @readonly = "readonly" })
                                          }
                                          else
                                          {
                                              @Html.DropDownListFor(x => x.ModelNo,
                            new SelectList(ViewBag.vModels, "Value", "Text"),
                            "Select ModelNo",
                            new { @class = "form-control input-sm" })
                                          }*@
                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">Customer Name<span class="error-req">*</span></label>
                    </div>
                    <div class="col-md-4">
                        @Html.DropDownListFor(x => x.CustomerCode,
       new SelectList(ViewBag.vendorsList, "Value", "Text"),
       "Select Customer",
       new { @class = "form-control input-sm" })
                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right"> Invoice No.&nbsp;</label>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(x => x.InvoiceNo,
      new
      {
          @class = "form-control input-sm",
          placeholder = "EZY Invoice"
          //,onblur = "CheckInvoiceNo()"
      })
                    </div>
                </div>
                @if (ViewBag.QuantityMismatched != null)
                {
                    <div class="callout callout-danger">
                        <h4>Warning!</h4>
                        <p>
                            Quantity and items in uploaded files not matched. Please try with another file.
                        </p>
                    </div>
                }
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">EZY Invoice Date.(DD/MM/YYYY)&nbsp; <span class="error-req">*</span></label>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="input-group date" id="InvoiceDt">
                                @Html.TextBoxFor(x => x.InvoiceDate, new { @class = "form-control input-sm" })
                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">Quantity&nbsp; <span class="error-req">*</span></label>
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(x => x.Quantity,
     new { @class = "form-control input-sm numCss", onblur = "Qty()" })
                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">Currency&nbsp; <span class="error-req">*</span></label>
                    </div>
                    <div class="col-md-3">
                        @{
                            var selectListItem = new List<SelectListItem> {
                                new SelectListItem { Text = "SING DOLLAR", Value = "SIG" },
                                new SelectListItem { Text = "INDIAN RUPEE", Value = "INR" },
                                new SelectListItem { Text = "MALAYSIAN RINGGIT", Value = "MYR" }
                            };
                        }
                        @Html.DropDownListFor(x => x.CurrencyCode,
                         new SelectList(ViewBag.Currency, "Value", "Text"),
                         "Select Currency",
                         new { @class = "form-control input-sm" })
                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">Unit Price&nbsp; <span class="error-req">*</span></label>
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(x => x.UnitPrice,
                            new { @class = "form-control input-sm decimalCss" })
                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">
                            Product Serial No.&nbsp;
                            <span class="error-req">*</span>
                        </label>
                    </div>
                    <div class="col-md-2">
                        <input id="fileupload" type="file" name="file" onchange="fileChanged(this)" />
                    </div>
                    <div class="col-md-2">
                        <button type="button"
                                class="btn btn-primary btn-sm"
                                onclick="ScanSerialNo()">
                            <i class="fa fa-barcode" aria-hidden="true"></i>&nbsp;Scan
                        </button>
                    </div>
                </div>
                <div class="row css10">
                    <div class="col-md-3">
                        <label class="control-label pull-right">Warranty Period (in month's) </label>
                    </div>
                    <div class="col-md-1">
                        @Html.DropDownListFor(x => x.WarrantyPeriod,
                            new SelectList(ViewBag.WarentyPeriodList, "Value", "Text"), "",
                            new { @class = "form-control input-sm", onchange = "WarrantyPeriod_OnChange(this);" })
                    </div>
                    <div class="col-md-8">
                        <b style="color:red" id="expirtyDtMsg">@ViewBag.ExpireMsg</b>
                    </div>
                </div>
                @*new button*@
                <div class="row css10">
                    <div class="col-md-4">
                    </div>
                    <div class="col-md-1">
                        @if (Model.DocumentNo != "" && Model.DocumentNo != null)
                        {
                            @Html.HiddenFor(x => x.DocumentNo)
                            <button type="button" id="SaveBtn" class="btn btn-success" onclick="SaveCustomerInvoice()">Update</button>
                        }
                    </div>
                </div>

                <input type="hidden" name="FileName" value="@Model.FileName" />

                @if (Model.InvoiceDetailItems != null)
                {
                    <div class="row css10">
                        <div class="col-md-4 col-md-offset-2">
                            <table class="table table-striped table-bordered" id="poptable">
                                <thead>
                                    <tr>
                                        <th bgcolor="#5D7B9D" style="color:white; width:25%">Sl No.</th>
                                        <th bgcolor="#5D7B9D" style="color:white; ">Product Serial No.</th>
                                        <th bgcolor="#5D7B9D" style="color:white; width:25%">
                                            Action
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (var i = 0; i < Model.InvoiceDetailItems.Count; i++)
                                    {
                                        <tr id="@(i)" class="detailCount">
                                            <td id="PNO">
                                                @(i + 1)
                                            </td>
                                            <td>
                                                @Model.InvoiceDetailItems[i].SerialNo
                                                @Html.HiddenFor(x => x.InvoiceDetailItems[i].SerialNo) &nbsp;&nbsp;&nbsp;&nbsp;
                                                @if (ViewBag.SerialNos != null)
                                                {
                                                    foreach (var item in ViewBag.SerialNos)
                                                    {
                                                        if (item == Model.InvoiceDetailItems[i].SerialNo)
                                                        {
                                                            <span id="span_invalid_@(i)" class="label label-danger isinvalid">invalid</span>
                                                        }

                                                    }
                                                }
                                            </td>
                                            <td>
                                                @*@if (Model.DocumentNo != "" && Model.DocumentNo != null)
                                                    {
                                                    <button type="button" class="btn btn-danger btn-sm" onclick="DeleteSerialNo('@Model.InvoiceDetailItems[i].SerialNo')"><i class="fa fa-trash-o"></i>&nbsp;Delete</button>
                                                    }
                                                    else
                                                    {*@
                                                <button type="button" class="btn btn-danger btn-sm isdelete" onclick="DeleteSerial(@(i),'@Model.InvoiceDetailItems[i].SerialNo')"><i class="fa fa-trash-o"></i>&nbsp;Delete</button>
                                                @*}*@
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-md-12">
                        @ViewBag.Exception
                    </div>
                </div>
            </div>
            <div class="box-footer">
                @if (UTILITY.HasRight("CustomerInvoiceSave", "Action"))
                {
                    if (Model.InvoiceDetailItems == null)
                    {
                        <button type="button" onclick="ProcessCustomerInvoice();" class="btn btn-danger btn-sm btn-frmt green">
                            <i class="fa fa-check-square-o"></i>&nbsp;Upload & Process
                        </button>
                    }
                    else if (Model.DocumentNo == null)
                    {
                        <button type="button" id="btnsave" onclick="SaveCustomerInvoice()" class="btn btn-danger btn-sm btn-frmt green">
                            <i class="fa fa-pencil-square"></i>&nbsp;Save Customer Invoice
                        </button>
                    }
                    else
                    {
                        <button type="button" onclick="ProcessCustomerInvoices();" class="btn btn-danger btn-sm btn-frmt green">
                            <i class="fa fa-check-square-o"></i>&nbsp;Upload & Process
                        </button>
                    }
                }
                <button type="button" onclick="location.href = '@Url.Content("~/Invoice/CustomerInvoiceList")'" class="btn btn-default btn-sm btn-frmt ">
                    <i class="fa fa-times"></i>&nbsp;Cancel
                </button>
            </div>
            <div class="overlay" style="display:none;">
                <i class="fa fa-refresh fa-spin"></i>
            </div>
        </div>
    </section>
    <div id="invoiceHeaderDetailDiv">
    </div>
                            }

<div id="ScanProductsModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Scan Products</h4>
            </div>
            <div class="modal-body" id="ProductModalBody">
                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-2">
                        <label class="control-label pull-right">Serial Nos</label>
                    </div>
                    <div class="col-md-10">
                        <textarea class="form-control input-sm" rows="10" id="serialNos" name="serialNos"></textarea>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="SaveSerialsNo()" class="btn btn-danger btn-frmt green btn-sm">
                    <i class="fa fa-floppy-o"></i>&nbsp;Ok
                </button>

                <button type="reset" class="btn btn-default btn-frmt btn-sm" data-dismiss="modal">
                    <i class="fa fa-times"></i>Cancel
                </button>
            </div>
        </div>
    </div>
</div>
@section secscripts{
    <script src="@Url.Content("~/Scripts/moment.min.js")"></script>
    <script src="@Url.Content("~/Scripts/bootstrap-datetimepicker.js")"></script>
    <script src="@Url.Content("~/Scripts/select2.min.js")"></script>
    <script src="@Url.Content("~/Scripts/sweetalert.js")"></script>
    <script type="text/javascript">
        $(function () {
            debugger;
            var length = $('.isinvalid').length;
            if (length >= 1) {
                $('#btnsave').attr('disabled', 'disabled');
                $('#SaveBtn').attr('disabled', 'disabled');
            }

            var v = $('#Quantity').val();
            var length = $('.detailCount').length;
            if (v != length) {
                $('#SaveBtn').attr('disabled', 'disabled');
            }
            @*
            var IsNotExist = '@TempData["IsNotExist"]';
            if (IsNotExist) {
                alertify.error("This SerialNo's Not Exist!");
                return false;
            }*@
            //$('#InvoiceDt').data("DateTimePicker").minDate(moment().startOf('week'));
            // $('#InvoiceDt').data("DateTimePicker").maxDate(moment().endOf('today'));
            @if (Model.InvoiceDate == null)
            {
                <text>$('#WarrantyPeriod').attr('readonly', 'readonly');</text>
            }
            //  $('#ProductCategory').val('@Model.ProductCategory');
            // $('#InvoiceDt').val('@Model.InvoiceDate');
            // $('#CurrencyCode').val('@Model.CurrencyCode');

            @if (Model.DocumentNo !=null)
            {
                <text> $('#ProductCategory').val('@Model.ProductCategory');</text>
                <text>$('#InvoiceDt').val('@Model.InvoiceDate');</text>
                <text>$('#CurrencyCode').val('@Model.CurrencyCode');</text>
            }
            //$('#InvoiceDt').data("DateTimePicker").minDate(moment().startOf('week'));
            //$('#InvoiceDt').data("DateTimePicker").maxDate(moment().endOf('today'));

        });
        function hideRow(event) {
            $(event.target || event.srcElement).parents('tr').hide();
        }
        $('#InvoiceDt').datetimepicker({
            icons: {
                time: 'fa fa-clock-o',
                date: 'fa fa-calendar',
                up: 'fa fa-arrow-up',
                down: 'fa fa-arrow-down'
            },
            format: 'DD/MM/YYYY'
        });

        $('#InvoiceDt').on('dp.change', function (e) {
            $('#WarrantyPeriod').removeAttr('readonly');
        });

        $('#frm').validate({
            rules: {
                ProductCategory: {
                    required: true
                },
                ProductCode: {
                    required: true
                },
                ModelNo: {
                    required: true
                },
                CustomerCode: {
                    required: true
                },
                InvoiceNo: {
                    required: true
                },
                InvoiceDate: {
                    required: true
                },
                Quantity: {
                    required: true
                },
                CurrencyCode: {
                    required: true
                },
                UnitPrice: {
                    required: true
                },
                WarrantyPeriod: {
                    required: true
                }
            }
        });

        @if(Model.InvoiceDetailItems == null)
        {
            <text>
        $('input[name^="file"]').each(function () {
            $(this).rules('add', {
                required: true
            })
        });
        </text>
        }
        //function DeleteSerialNo(SerialNo) {
        //    var result = confirm('Are you sure, do you want to delete ' + SerialNo);
        //    if (result) {
        //        $('#SerialNo').val(SerialNo);
        //        $('#frmDeleteSerialNo').submit();
        //    }
        //}
        function DeleteSerial(serialNoId, serialNo) {
            var changeSerialNo = $('#InvoiceDetailItems_' + serialNoId + '__SerialNo').val('Deleted');
            var x = $('#' + serialNoId).removeClass('detailCount').hide();
            var v = $('#Quantity').val();
            var length = $('.isdelete').length;
            var i = length - x.length;
            if (v != i) {
                $('#btnsave').attr('disabled', 'disabled');
                $('#SaveBtn').attr('disabled', 'disabled');
            }
            $('#span_invalid_' + serialNoId).removeClass('isinvalid').hide();
            var invalidLength = $('.isinvalid').length;
            if (invalidLength == 0) {
                $('#btnsave').removeAttr('disabled');
                $('#SaveBtn').removeAttr('disabled');
            }
        }
        function Qty() {
            var v = $('#Quantity').val();
            var rowCount = $('.detailCount').length;
            if (v == rowCount) {
                $('#btnsave').removeAttr('disabled', 'disabled');
                $('#SaveBtn').removeAttr('disabled', 'disabled');
            }
        }
        @*function CheckInvoiceNo() {

              var InvoiceNo = $('#InvoiceNo').val();
              $.ajax({
                  url: '@Url.Content("~/Invoice/CheckCustomerInvoiceNo?invoiceNo=")' + InvoiceNo,
                  method: 'POST',
                  contentType: 'application/json',
                  success: function (data) {

                      if (data == false) {
                          alert('This InvoiceNo is exist!')
                          $('#InvoiceNo').val('');
                      }
                  },
                  error: function (err) {


                  }
              });
          }*@
        function ProcessCustomerInvoice() {

            if ($('#frm').valid()) {
                $('#frm').submit();
            }
        }
        function ProcessCustomerInvoices() {
            if ($('#frm').valid()) {
                var serialNos = $('#serialNos').val().split(/\n/);
                var Exsno = $('.detailCount').length;
                var valuesSoFar = Object.create(null);
                for (var i = 0; i <= Exsno; i++) {
                    var values = $('#InvoiceDetailItems_' + i + '__SerialNo').val();
                    valuesSoFar[i] = values;
                }
                var valuesInObj = Object.create(null);
                var count = Object.keys(valuesSoFar).length;
                for (var i = 0; i < count; ++i) {
                    var value = valuesSoFar[i];
                    if (value in valuesInObj) {
                        swal("Cancelled", "This SerialNo Already Existed!", "error");
                        //    alert('This SerialNo Already Existed!');
                        return true;
                    }
                    valuesInObj[value] = true;
                }
                $('#frm').submit();
            }
        }

        function SaveCustomerInvoice() {
            if ($('#frm').valid()) {
                var v = $('#Quantity').val();
                var length = $('.detailCount').length;
                if (v != length) {
                    swal("Cancelled", "Quantity and items in uploaded files not matched. Please try with another file.", "error");
                    //alert(" Quantity and items in uploaded files not matched. Please try with another file.");
                }
                else {

                    if (confirm("Are you sure ? You want to save \nProduct Category: " + $('#ProductCategory option:selected').text()
                        + "\nProduct Code: " + $('#ProductCode').val() + "\nDescription: " + $('#ProductDescription').val() + "\nCustomer / Supplier Name: " + $('#CustomerCode option:selected').text()
                        + "\nInvoice No: " + $('#InvoiceNo').val() + "\nQuantity: " + $('#Quantity').val() + "\nUnit Price: " + $('#UnitPrice').val())) {
                        $('#frm').attr('action', '@Url.Content("~/Invoice/SaveCustomerInvoice")');
                        $('#frm').submit();
                    }
                }
            }
        }

        function WarrantyPeriod_OnChange(el) {
            var months = parseInt(el.value);
            var invoiceDate = $('#InvoiceDate').val();

            var expiryDate = moment(invoiceDate, 'DD/MM/YYYY').add(months, 'M');
            $('#expirtyDtMsg').html('Your invoice will expire on ' + moment(expiryDate).format('DD/MM/YYYY'));

        }

        function productCategoryChanged(el) {
            var productCategory = el.value;
            if (productCategory != "") {
                $('.overlay').show();
                $('#ProductCode').empty().append($('<option></option>').val("").html("Select Product")).select2();
                $.ajax({
                    url: '@Url.Content("~/Invoice/ProductsByCategory?productCategory=")' + productCategory,
                    method: 'get',
                    contentType: 'application/json',
                    success: function (data) {
                        $.each(data, function (i, item) {
                            $('#ProductCode').append('<option value="' + item.Value + '">' + item.Text + '</option>').select2();
                        });
                        $('#ProductCode').removeAttr('readonly');
                        setTimeout(function () {
                            $('.overlay').hide();
                        }, 500);

                    },
                    error: function (err) {

                    }
                });
            }
            else {
                $('#ProductCode').empty().append($('<option></option>').val("").html("Select Product")).val("");
            }

        }

        function productChanged(el) {
            var obj = {};
            obj.ProductCategory = $('#ProductCategory').val();
            obj.ProductCode = el.value;

            $('.overlay').show();
            $('#ModelNo').empty().append($('<option></option>').val("").html("Select Product"));
            $.ajax({
                url: '@Url.Content("~/Invoice/ModelsByProductCode")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(obj),
                success: function (data) {
                    $.each(data, function (i, item) {
                        $('#ModelNo').val(item.Value);
                        $('#ProductDescription').val(item.Text);
                        // $('#ModelNo').append('<option value="' + item.Value + '">' + item.Text + '</option>');
                    });
                    $('#ModelNo').removeAttr('readonly');
                    setTimeout(function () {
                        $('.overlay').hide();
                    }, 500);

                },
                error: function (err) {

                }
            });
        }

        function ScanSerialNo() {
            $('#ScanProductsModal').modal('show');
            setTimeout(function () {
                $('#serialNos').focus();
            }, 900);
        }

        function fileChanged(el) {
            var file = el.files[0];
            if (file != null) {
                $('#scanBtn').attr('disabled', 'disabled');
            }
        }
        function SaveSerialsNo() {

            var length = $('.detailCount').length;
            if (length != 0) {

                var prevSerialNo = $('#InvoiceDetailItems_0__SerialNo').val();
            }
            var serialNos = $('#serialNos').val().split(/\n/);
            var valuesSoFar = Object.create(null);
            var duplicateSerialNos = [];
            //valuesSoFar.push();
            for (var i = 0; i < serialNos.length; ++i) {
                var value = serialNos[i];
                if (value in valuesSoFar)
                    duplicateSerialNos.push(value);

                valuesSoFar[value] = true;
            }

            if (duplicateSerialNos && duplicateSerialNos.length > 0) {
                swal("Cancelled", "Please Remove Duplicate SerialNos" + " " + duplicateSerialNos + "", "error");
                // swal("Cancelled", "Please remove all invalid serialNo's", "error");
                //alert('Please Remove Duplicate Values of ' + duplicateSerialNos + '');
                return true;
            }

            var settings = $('#frm').validate().settings;
            settings.rules.file = { required: false };
            var invoiceDetailHtml = '';
            if (length == 0) {
                $.each(serialNos, function (index, item) {
                    if (item != '') {
                        invoiceDetailHtml += '<input type="hidden" id="InvoiceDetailItems_' + index + '__SerialNo" name="InvoiceDetailItems[' + index + '].SerialNo" value="' + item + '" />'
                    }
                });
            }
            else {

                //      var SNos = $('#serialNos').val().split(/\n/);
                //     var Exsno=$('.detailCount').length;
                //     var valuesSoFr = Object.create(null);
                //    for(var i=0;i<=Exsno;i++)
                //    {
                //      var values=  $('#InvoiceDetailItems_' + i + '__SerialNo').val();
                //     valuesSoFr[i] = values;
                //    }
                //  var valuesInOb = Object.create(null);
                //   var count = Object.keys(valuesSoFr).length;
                //    for (var i = 0; i < count; ++i) {
                //        var value = valuesSoFr[i];
                // if (value in valuesInOb)
                // {
                //            alert('Please Remove Duplicate Values');
                //            return true;
                //}
                // valuesInOb[value] = true;
                //}
                $.each(serialNos, function (index, item) {

                    index = length + index;
                    if (item != '') {
                        invoiceDetailHtml += '<input type="hidden" id="InvoiceDetailItems_' + index + '__SerialNo" name="InvoiceDetailItems[' + index + '].SerialNo" value="' + item + '" />'
                    }
                });
            }
            $('#invoiceHeaderDetailDiv').html(invoiceDetailHtml);
            $('#fileupload').attr('disabled', 'disabled');
            $('#ScanProductsModal').modal('hide');
            $('#FileName').val('');
        }

        //function SaveSerialsNo() {
        //    var settings = $('#frm').validate().settings;
        //    settings.rules.file = { required: false };

        //    var serialNos = $('#serialNos').val().split(/\n/);

        //    var invoiceDetailHtml = '';
        //    $.each(serialNos, function (index, item) {
        //        if (item != '') {
        //            invoiceDetailHtml += '<input type="hidden" id="InvoiceDetailItems_' + index + '__SerialNo" name="InvoiceDetailItems[' + index + '].SerialNo" value="' + item + '" />'
        //        }
        //    });
        //    $('#invoiceHeaderDetailDiv').html(invoiceDetailHtml);
        //    $('#fileupload').attr('disabled', 'disabled');
        //    $('#ScanProductsModal').modal('hide');
        //    $('#FileName').val('');

        //}
    </script>
}

